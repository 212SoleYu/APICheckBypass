// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<usize>;
    let mut _2: std::boxed::Box<[usize]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[usize; 5]>;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: &mut usize;
    let mut _12: &mut std::vec::Vec<usize>;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: (usize, bool);
    let mut _17: &usize;
    let mut _18: &std::vec::Vec<usize>;
    let mut _19: usize;
    let mut _20: *const [usize; 5];
    let mut _21: *const ();
    let mut _22: usize;
    let mut _23: usize;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    scope 1 {
        debug a => _1;
        let mut _7: usize;
        scope 2 {
            debug i => _7;
            let _16: usize;
            scope 3 {
                debug result => _16;
            }
        }
    }

    bb0: {
        _3 = SizeOf([usize; 5]);
        _4 = AlignOf([usize; 5]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [usize; 5]);
        _20 = copy ((_6.0: std::ptr::Unique<[usize; 5]>).0: std::ptr::NonNull<[usize; 5]>) as *const [usize; 5] (Transmute);
        _21 = copy _20 as *const () (PtrToPtr);
        _22 = copy _21 as usize (Transmute);
        _23 = AlignOf([usize; 5]);
        _24 = Sub(copy _23, const 1_usize);
        _25 = BitAnd(copy _22, copy _24);
        _26 = Eq(copy _25, const 0_usize);
        assert(copy _26, "misaligned pointer dereference: address must be a multiple of {} but is {}", copy _23, copy _22) -> [success: bb12, unwind unreachable];
    }

    bb2: {
        _7 = const 0_usize;
        goto -> bb3;
    }

    bb3: {
        _9 = copy _7;
        _8 = Lt(move _9, const 5_usize);
        switchInt(move _8) -> [0: bb7, otherwise: bb4];
    }

    bb4: {
        _10 = copy _7;
        _12 = &mut _1;
        _13 = copy _7;
        _11 = <Vec<usize> as IndexMut<usize>>::index_mut(move _12, move _13) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        (*_11) = move _10;
        _14 = copy _7;
        _15 = AddWithOverflow(copy _14, const 1_usize);
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _14, const 1_usize) -> [success: bb6, unwind: bb10];
    }

    bb6: {
        _7 = move (_15.0: usize);
        goto -> bb3;
    }

    bb7: {
        _18 = &_1;
        _19 = copy _7;
        _17 = <Vec<usize> as Index<usize>>::index(move _18, move _19) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        _16 = copy (*_17);
        drop(_1) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        (*_20) = [const 1_usize, const 2_usize, const 3_usize, const 4_usize, const 5_usize];
        _2 = move _6 as std::boxed::Box<[usize]> (PointerCoercion(Unsize, Implicit));
        _1 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}
